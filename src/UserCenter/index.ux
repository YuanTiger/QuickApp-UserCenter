<template>
    <!---->
    <div class="container">
        <div class="container_top">
            <stack class="container_user_photo">
                <image src="{{user.userPhoto}}" class="user_photo"></image>
                <image src="../res/mipmap/ic_sex_man.png" class="user_sex" if="user.sex ==0"></image>
                <image src="../res/mipmap/ic_sex_woman.png" class="user_sex" if="user.sex ==1"></image>
            </stack>
            <text class="user_name">{{user.userName}}</text>
            <text class="user_id">{{user.userId}}</text>

        </div>
        <div for="item in pageList" class="container_bottom">
            <div class="item" onclick="toPage(item.id)">

                <image src="{{item.icon}}" class="item_icon"></image>

                <text class="item_title">{{item.title}}</text>


                <text class="item_bubble" show="{{item.bubble>0}}">{{item.bubble}}</text>

                <image src="../res/mipmap/ic_enter.png" class="item_arrow"></image>
            </div>
            <div class="line"></div>
        </div>
    </div>

</template>

<style lang="less">
    @import "../res/less/base.less";
    @import "../res/less/UserCenter/index.less";

</style>

<script>
    //路由
    import router from '@system.router'

    export default {
        data: {

            user: {
                userName: "YuanTiger",
                userId: "888888",
                sex: 0,
                userPhoto: "../res/mipmap/icon_photo.jpeg",
            },
            //设置页条目
            pageList: [
                {
                    title: "My Friends",
                    icon: "../res/mipmap/icon_friend.png",
                    id: 101
                },
                {
                    title: "My Star",
                    icon: "../res/mipmap/icon_follow.png",
                    id: 102
                },
                {
                    title: "History",
                    icon: "../res/mipmap/ic_history.png",
                    bubble: 5,
                    id: 103
                },
                {
                    title: "Recharge",
                    icon: "../res/mipmap/icon_recharge_other.png",
                    id: 104
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                },
                {
                    title: "Setting",
                    icon: "../res/mipmap/icon_set.png",
                    id: 105
                }
            ],


        },

        //表示VM的数据(events，props，data)已经准备好
        onInit() {
            console.info('触发：onInit()');
        },
        //表示VM的模块已经编译完成，可以获取DOM节点
        onReady() {
            console.info('触发：onReady()');
        },
        //表示页面处于前台
        onShow() {
            console.info("触发：onShow()");
        },
        //表示页面被隐藏了
        //关于页面的当前状态，可用VM的$visible属性：true表示显示状态，false表示隐藏状态
        onHide() {
            console.info("触发：onHide()");
        },

        //页面被销毁时调用
        //页面被销毁的原因有：1、从当前页返回上一页，2、打开页面太多，自动销毁，避免资源浪费
        //判断页面是否销毁，可以使用VM的$valid属性：true表示存在，false表示销毁
        onDestroy() {
            console.info("触发：onDestroy()");

        },
        //返回时调用，不管是实体按键，还是左上角返回等调用返回API的时候
        //拥有返回值，返回true表示不返回，自己处理业务逻辑，最后调用返回API:router.back()
        //返回false则遵循系统逻辑，返回上一页
        onBackPress() {
            console.info("触发：onBackPress");
        },
        //当使用原生顶部标题栏时，可以通过清单文件中的menu属性配置是否显示右上角的菜单
        onMenuPress() {
            console.info("触发：onMenuPress()");
        },
        /**
         * 当用户点击菜单按钮时触发，调用app中定义的方法showMenu
         * 注意：使用加载器测试`创建桌面快捷方式`功能时，请先在`系统设置`中打开`应用加载器`的`桌面快捷方式`权限
         */
        onMenuPress() {
            this.$app.showMenu()
        },
        /**页面跳转**/
        toPage(id) {
            var page;
            //判断跳转页面
            if (id == 101) {
                page = 'MyFriend';

            } else if (id == 104) {
                page = 'Recharge';
            }
            //进行跳转
            if(page == null){
                return;
            }
            router.push({
                uri: page,
            })

        }
    }
</script>
